/**
 * @description thrift文件mock模拟接口
 * @author      yq
 * @date        2017-10-19 14:24:13
 */

import Mock from 'mockjs';
import { queryParse } from '../utils';
import { queryThriftFileListApi, uploadThriftFileApi, } from '../config/api';

const listData = Mock.mock({
  'data|20-50': [
    {
      id: '@id',
      name: /^[a-zA-Z]+$/,
      updateTime: '@datetime',
      createTime: '@datetime',
    },
  ],
});


let database = listData.data;

export default () => {
  // 查询列表(含count)
  Mock.mock(new RegExp(queryThriftFileListApi.path), queryThriftFileListApi.method, (options) => {
    console.warn('\n\n\nThrift file list 接口-----', options);
    let query = {};
    if (options.url) {
      try {
        query = queryParse(options.url);
      } catch (err) {
        console.error('parse query err', err);
        query = {};
      }
    }
    let { pageSize, page, sorts, ...other } = query;
    pageSize = pageSize || 10;
    page = page || 1;
    let newData = database;
    const otherKeys = Object.keys(other);
    for (let i = 0; i < otherKeys.length; i += 1) {
      const key = otherKeys[i];
      newData = newData.filter((item) => {
        if (key === 'keyword') {
            return item.name.indexOf(other[key]) !== -1;
          } else if (key === 'startTime') {
            const start = new Date(other[key]).getTime();
            const now = new Date(item.createTime).getTime();
            return now >= start;
          } else if (key === 'endTime') {
            const end = new Date(other[key]).getTime();
            const now = new Date(item.createTime).getTime();
            return now <= end;
          }
          return true;
        });
    }

    if (sorts) {
      let newSorts = [];
      if (!Array.isArray(sorts)) {
        newSorts = [sorts];
      } else {
        newSorts = sorts;
      }
      for (let i = 0; i < newSorts.length; i += 1) {
        if (!newSorts[i]) continue;
        const sortArr = newSorts[i].split('_');
        newData = newData.sort((a, b) => {
          if (sortArr[0] === 'name') {
            return sortArr[1] === 'desc'
              ? a[sortArr[0]] - b[sortArr[0]]
              : b[sortArr[0]] - a[sortArr[0]];
          }
          return sortArr[1] === 'asc'
          ? new Date(a[sortArr[0]]) - new Date(b[sortArr[0]])
          : new Date(b[sortArr[0]]) - new Date(a[sortArr[0]]);
        });
      }
    }
    return ({
      code: 0,
      data: {
        list: newData.slice((page - 1) * pageSize, page * pageSize),
        total: newData.length,
      }
    });
  });
  // 上传文件api
  Mock.mock(new RegExp(uploadThriftFileApi.path), uploadThriftFileApi.method, (options) => {
    console.log('上传thrift文件接口-----', options);
    let body = {};
    if (options.body) {
      try {
        body = JSON.parse(options.body);
      } catch (err) {
        console.error('parse body err', err);
        body = {};
      }
    }
    const time = Mock.mock('@now');
    const newData = {
      id: Mock.mock('@id'),
      name: body.fileName || Mock.mock('@name'),
      updateTime: time,
      createTime: time,
    };
    database.unshift(newData);
    return ({
      code: 0,
      msg: '操作成功',
    });
  });
};
