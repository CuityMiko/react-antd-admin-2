import Mock from 'mockjs';
import { loginApi, logoutApi, queryUserMenusApi, queryUserApi, } from '../config/api';
import * as Cookie from '../utils/cookie';
import MD5 from 'blueimp-md5';

let usersListData = Mock.mock({
  'data|80-100': [
    {
      id: '@id',
      name: '@name',
      nickName: '@last',
      phone: /^1[34578]\d{9}$/,
      'age|11-99': 1,
      address: '@county(true)',
      isMale: '@boolean',
      email: '@email',
      createTime: '@datetime',
      avatar() {
        return Mock.Random.image('100x100', Mock.Random.color(), '#757575', 'png', this.nickName.substr(0, 1));
      },
    },
  ],
});


let database = usersListData.data;

const EnumRoleType = {
  ADMIN: 'admin',
  DEFAULT: 'guest',
  DEVELOPER: 'developer',
};

const userPermission = {
  DEFAULT: {
    visit: ['1', '2', '21', '7', '5', '51', '52', '53'],
    role: EnumRoleType.DEFAULT,
  },
  ADMIN: {
    role: EnumRoleType.ADMIN,
  },
  DEVELOPER: {
    role: EnumRoleType.DEVELOPER,
  },
};

const adminUsers = [
  {
    id: 1,
    username: 'admin',
    password: '123456',
    permissions: userPermission.ADMIN,
  }, {
    id: 2,
    username: 'guest',
    password: 'guest',
    permissions: userPermission.DEFAULT,
  }, {
    id: 3,
    username: 'sailor',
    password: '123456',
    permissions: userPermission.DEVELOPER,
  },
];

const queryArray = (array, key, keyAlias = 'key') => {
  if (!(array instanceof Array)) {
    return null;
  }
  let data;

  for (let item of array) {
    if (item[keyAlias] === key) {
      data = item;
      break;
    }
  }

  if (data) {
    return data;
  }
  return null;
};

let loginUser = Cookie.getJson('login-user');

export default () => {
  // Mock
  // 登录
  Mock.mock(new RegExp(loginApi.path), loginApi.method, (options) => {
    console.log('登录接口-----', options);
    let body = {};
    if (options.body) {
      try {
        body = JSON.parse(options.body);
      } catch (err) {
        console.error('parse body err', err);
        body = {};
      }
    }
    const { username, password } = body;
    const user = adminUsers.find(item => item.username === username);
    if (!user || !MD5(user.password) === password) {
      return {
        code: 400,
        msg: '账号或密码不正确'
      };
    }
    loginUser = user;
    Cookie.set('login-user', user);
    return {
      code: 0,
      data: {
        uid: user.uid,
        username: user.username,
        token: user.username,
      }
    };
  });
  // 退出
  Mock.mock(new RegExp(logoutApi.path), logoutApi.method, () => {
    // 清空cookie
    loginUser = null;
    Cookie.remove('login-user');
    return {
      code: 0,
      msg: '操作成功'
    };
  });
};
